configs:
  cm:
    application.resourceTrackingMethod: annotation
    resource.customizations: |
      "*.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
            health_status.status = "Healthy"
            health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

      "*.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "Composition",
            "CompositionRevision",
            "DeploymentRuntimeConfig",
            "ControllerConfig",
            "ProviderConfig",
            "ProviderConfigUsage"
          }
      
          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status
    resource.exclusions: |
      - apiGroups:
        - "*"
        kinds:
        - ProviderConfigUsage
  params:
    server.insecure: true

server:
  service:
    type: ClusterIP
    annotations:
      cloud.google.com/neg: '{"ingress": true}'
      cloud.google.com/backend-config: '{"default": "argocd-server"}'

  ingress:
    enabled: true
    controller: gke
    ingressClassName: ""
    annotations:
      kubernetes.io/ingress.class: "gce"
    hostname: argocd.log.dev.gcp.psi.de
    gke:
      backendConfig:
        healthCheck:
          port: 8080
          timeoutSec: 1
          type: HTTP
          requestPath: /healthz

  autoscaling:
    enabled: true
    minReplicas: 2

redis-ha:
  enabled: true

controller:
  replicas: 2

repoServer:
  autoscaling:
    enabled: true
    minReplicas: 2

applicationSet:
  replicas: 2

notifications:
  secret:
    create: false
  notifiers:
    service.webhook.gitlab: |
      url: $gitlabUrl
      headers:
      - name: Authorization
        value: $gitlabToken
      - name: Content-type
        value: application/json
  templates:
    template.app-fixed: |
      webhook:
        gitlab:
          method: POST
          body: |
            {
              "title": "{{.app.metadata.name}} service fixed",
              "description": "{{.app.metadata.name}} service is back to normal status, incident is closed",
              "end_time": "{{.app.status.operationState.startedAt}}",
              "service": "{{.app.metadata.name}}",
              "monitoring_tool": "ArgoCD",
              "hosts": "{{.app.spec.destination.server}}",
              "severity": "high",
              "fingerprint": "{{.app.metadata.name}}"
            }
    template.app-failed: |
      webhook:
        gitlab:
          method: POST
          body: |
            {
              "title": "{{.app.metadata.name}} service failed",
              "description": "{{.app.metadata.name}} service has broken down, needs to be repaired",
              "start_time": "{{.app.status.operationState.startedAt}}",
              "service": "{{.app.metadata.name}}",
              "monitoring_tool": "ArgoCD",
              "hosts": "{{.app.spec.destination.server}}",
              "severity": "high",
              "fingerprint": "{{.app.metadata.name}}"
            }
    template.app-progressing: |
      webhook:
        gitlab:
          method: POST
          body: |
            {
              "title": "{{.app.metadata.name}} in progressing status too long",
              "description": "{{.app.metadata.name}} service has broken down, needs to be repaired",
              "start_time": "{{.app.status.operationState.startedAt}}",
              "service": "{{.app.metadata.name}}",
              "monitoring_tool": "ArgoCD",
              "hosts": "{{.app.spec.destination.server}}",
              "severity": "high",
              "fingerprint": "{{.app.metadata.name}}"
            }        
  triggers:
    trigger.on-fixed: |
      - description: Application is synced and healthy.
        send:
        - app-fixed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-sync-failed: |
      - description: Application syncing has failed.
        send:
        - app-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-progressing: |
      - description: Application in "progressing" status too long
        send:
        - app-progressing
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Progressing' and time.Now().Sub(time.Parse(app.status.operationState.startedAt)).Minutes() > 30
